{"version":3,"sources":["reportWebVitals.js","RegistrationForm.jsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Option","Select","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","RegistrationForm","useState","Username","setUsername","Form","useForm","form","prefixSelector","Item","name","noStyle","style","width","value","method","action","id","onFinish","values","document","getElementById","appendChild","Sex","submit","initialValues","prefix","scrollToFirstError","label","tooltip","validateStatus","hasFeedback","help","errorMsg","onBlur","number","tmpurl","target","state","$","ajax","url","type","datatype","UserName","async","success","result","console","log","validatePrimeNumber","rules","required","pattern","message","getFieldValue","validator","_","Promise","reject","Error","resolve","Password","dependencies","addonBefore","valuePropName","href","htmlType","ReactDOM","render"],"mappings":"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","file":"static/js/main.323196b3.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from 'react';\r\nimport { Form, Input, Select, Checkbox, Button, DatePicker } from 'antd';\r\nimport $ from 'jquery'\r\n\r\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\r\nimport './RegistrationForm.css';\r\n\r\nfunction validatePrimeNumber(number) {\r\n    var tmpurl= \"isUserExist?UserName=\"+number.target.value\r\n    if(!number.target.value){\r\n        return {\r\n            validateStatus: 'error',\r\n            errorMsg: 'Please input your username!',\r\n        };\r\n    }\r\n    var state = false\r\n    $.ajax(\r\n        {url:tmpurl,\r\n            type:\"GET\",\r\n            datatype:{UserName:number.target.value},\r\n            async: false,\r\n            success: function (result){\r\n                console.log(result);\r\n                if(result){\r\n                    state = true;\r\n                }\r\n            }\r\n        }\r\n    )\r\n    console.log(state)\r\n    if (!state) {\r\n        return {\r\n            validateStatus: 'success',\r\n            errorMsg: null,\r\n        }\r\n    }\r\n    else{\r\n        return {\r\n            validateStatus: 'error',\r\n            errorMsg: 'The user name has already been used!',\r\n        };\r\n    }\r\n}\r\n\r\nconst { Option } = Select;\r\n\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 8 },\r\n    },\r\n    wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 16 },\r\n    },\r\n};\r\nconst tailFormItemLayout = {\r\n    wrapperCol: {\r\n        xs: {\r\n            span: 24,\r\n            offset: 0,\r\n        },\r\n        sm: {\r\n            span: 16,\r\n            offset: 8,\r\n        },\r\n    },\r\n};\r\n\r\n\r\n\r\nconst RegistrationForm = () => {\r\n    const [Username,setUsername] = useState({});\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const onFinish = (values: any) => {\r\n        document.getElementById('components-form-demo-normal-register').appendChild( document.getElementById(\"csrf\"));\r\n        document.getElementById(\"Sex\").value= values.Sex;\r\n        document.getElementById('components-form-demo-normal-register').submit();\r\n    };\r\n\r\n    const prefixSelector = (\r\n        <Form.Item name=\"prefix\" noStyle>\r\n            <Select style={{ width: 70 }}>\r\n                <Option value=\"86\">+86</Option>\r\n                <Option value=\"87\">+87</Option>\r\n            </Select>\r\n        </Form.Item>\r\n    );\r\n\r\n    const onNumberChange = (value) => {\r\n        setUsername({ ...validatePrimeNumber(value), value });\r\n    };\r\n\r\n\r\n    return (\r\n        <Form\r\n            {...formItemLayout}\r\n            form={form}\r\n            method=\"post\"\r\n            action=\"registerUser\"\r\n            name=\"register\"\r\n            id=\"components-form-demo-normal-register\"\r\n            onFinish={onFinish}\r\n            initialValues={{\r\n                prefix: '86',\r\n            }}\r\n            scrollToFirstError\r\n        >\r\n\r\n            <Form.Item\r\n                name=\"UserName\"\r\n                label=\"Username\"\r\n                tooltip=\"You will log in with your username.\"\r\n                validateStatus={Username.validateStatus}\r\n                hasFeedback\r\n                help={Username.errorMsg}\r\n            >\r\n                <Input name=\"UserName\" onBlur={onNumberChange}/>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                name=\"Password\"\r\n                label=\"Password\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        pattern: /^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{6,20}$/,\r\n                        message: 'The password must contain letters and numbers, and cannot be less than 6 digits, and cannot be more than 20 digits!',\r\n                    },\r\n                    ({ getFieldValue }) => ({\r\n                        validator(_, value) {\r\n                            if (!value || getFieldValue('Password') === value) {\r\n                                return Promise.resolve();\r\n                            }\r\n                            return Promise.reject(new Error('The two passwords that you entered do not match!'));\r\n                        },\r\n                    }),\r\n                ]}\r\n                hasFeedback\r\n            >\r\n                <Input.Password name=\"Password\"/>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                name=\"Confirm\"\r\n                label=\"Confirm Password\"\r\n                dependencies={['password']}\r\n                hasFeedback\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please confirm your password!',\r\n                    },\r\n                    ({ getFieldValue }) => ({\r\n                        validator(_, value) {\r\n                            if (!value || getFieldValue('Password') === value) {\r\n                                return Promise.resolve();\r\n                            }\r\n                            return Promise.reject(new Error('The two passwords that you entered do not match!'));\r\n                        },\r\n                    }),\r\n                ]}\r\n            >\r\n                <Input.Password />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                name=\"PhoneNumber\"\r\n                label=\"Phone Number\"\r\n                hasFeedback\r\n                rules={[{\r\n                    required: true,\r\n                    pattern: /^1\\d{10}$/,\r\n                    message: 'Please input your phone number!' }]}\r\n            >\r\n                <Input name=\"PhoneNumber\" addonBefore={prefixSelector} style={{ width: '100%' }} />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                name=\"SecurityQuestion\"\r\n                label=\"Security Question\"\r\n                tooltip=\"You may need it when you forget your password, but you don't need to remember it, because we will provide it when you forget your password.\"\r\n                rules={[{ required: true, message: 'Please enter your security question!' }]}\r\n            >\r\n                <Input name=\"SecurityQuestion\"/>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                name=\"SecurityAnswer\"\r\n                label=\"Security Answer\"\r\n                tooltip=\"You may need it when you forget your password, you need to remember it.\"\r\n                rules={[{ required: true, message: 'Please enter your security answer!' }]}\r\n            >\r\n                <Input name=\"SecurityAnswer\"/>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                name=\"agreement\"\r\n                valuePropName=\"checked\"\r\n                rules={[\r\n                    {\r\n                        validator: (_, value) =>\r\n                            value ? Promise.resolve() : Promise.reject(new Error('Should accept agreement')),\r\n                    },\r\n                ]}\r\n                {...tailFormItemLayout}\r\n            >\r\n                <Checkbox>\r\n                    I have read the <a href=\"agreement\" target=\"_blank\">agreement</a>\r\n                </Checkbox>\r\n            </Form.Item>\r\n            <Form.Item {...tailFormItemLayout}>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    Register\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default RegistrationForm;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport RegistrationForm from \"./RegistrationForm\";\n\nReactDOM.render(\n    <RegistrationForm />,\n  document.getElementById('Register')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}